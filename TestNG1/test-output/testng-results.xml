<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="0" failed="1" ignored="0" total="9" passed="8">
  <reporter-output>
  </reporter-output>
  <suite name="TestNG Learning" duration-ms="35" started-at="2019-06-05T02:09:38Z" finished-at="2019-06-05T02:09:38Z">
    <groups>
    </groups>
    <test name="Learning assertions" duration-ms="34" started-at="2019-06-05T02:09:38Z" finished-at="2019-06-05T02:09:38Z">
      <class name="testcases.assertion">
        <test-method status="FAIL" signature="asserttest()[pri:0, instance:testcases.assertion@33e5ccce]" name="asserttest" duration-ms="12" started-at="2019-06-05T07:39:38Z" finished-at="2019-06-05T07:39:38Z">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[The following asserts failed:
	expected [xyz] but found [abc]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: The following asserts failed:
	expected [xyz] but found [abc]
	at org.testng.asserts.SoftAssert.assertAll(SoftAssert.java:43)
	at testcases.assertion.asserttest(assertion.java:22)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:483)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:661)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:869)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1193)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:126)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
	at org.testng.TestRunner.privateRun(TestRunner.java:744)
	at org.testng.TestRunner.run(TestRunner.java:602)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:380)
	at org.testng.SuiteRunner.access$000(SuiteRunner.java:39)
	at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:414)
	at org.testng.internal.thread.ThreadUtil$1.call(ThreadUtil.java:52)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- asserttest -->
      </class> <!-- testcases.assertion -->
    </test> <!-- Learning assertions -->
    <test name="login Login" duration-ms="26" started-at="2019-06-05T02:09:38Z" finished-at="2019-06-05T02:09:38Z">
      <class name="testcases.logintest">
        <test-method status="PASS" signature="testA(java.lang.String, java.lang.String)[pri:0, instance:testcases.logintest@387c703b]" name="testA" duration-ms="0" started-at="2019-06-05T07:39:38Z" data-provider="sampledataprovider" finished-at="2019-06-05T07:39:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[u1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[p1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testA -->
        <test-method status="PASS" signature="testA(java.lang.String, java.lang.String)[pri:0, instance:testcases.logintest@387c703b]" name="testA" duration-ms="0" started-at="2019-06-05T07:39:38Z" data-provider="sampledataprovider" finished-at="2019-06-05T07:39:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[u2]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[p2]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testA -->
        <test-method status="PASS" signature="testB(java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:testcases.logintest@387c703b]" name="testB" duration-ms="0" started-at="2019-06-05T07:39:38Z" data-provider="sampledataprovider" finished-at="2019-06-05T07:39:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[u1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[p1]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[e1]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[b1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testB -->
        <test-method status="PASS" signature="testB(java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:testcases.logintest@387c703b]" name="testB" duration-ms="0" started-at="2019-06-05T07:39:38Z" data-provider="sampledataprovider" finished-at="2019-06-05T07:39:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[u2]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[p2]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[e2]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[b2]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testB -->
        <test-method status="PASS" signature="testB(java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:testcases.logintest@387c703b]" name="testB" duration-ms="0" started-at="2019-06-05T07:39:38Z" data-provider="sampledataprovider" finished-at="2019-06-05T07:39:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[u3]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[p3]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[e3]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[b3]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testB -->
      </class> <!-- testcases.logintest -->
    </test> <!-- login Login -->
    <test name="Selling Books" duration-ms="34" started-at="2019-06-05T02:09:38Z" finished-at="2019-06-05T02:09:38Z">
      <class name="testcases.testcases">
        <test-method status="PASS" signature="beforesuite()[pri:0, instance:testcases.testcases@71f2a7d5]" name="beforesuite" is-config="true" duration-ms="18" started-at="2019-06-05T07:39:38Z" finished-at="2019-06-05T07:39:38Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforesuite -->
        <test-method status="PASS" signature="beforetest()[pri:0, instance:testcases.testcases@71f2a7d5]" name="beforetest" is-config="true" duration-ms="1" started-at="2019-06-05T07:39:38Z" finished-at="2019-06-05T07:39:38Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforetest -->
        <test-method status="PASS" signature="beforemethod()[pri:0, instance:testcases.testcases@71f2a7d5]" name="beforemethod" is-config="true" duration-ms="1" started-at="2019-06-05T07:39:38Z" finished-at="2019-06-05T07:39:38Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforemethod -->
        <test-method status="PASS" signature="loginTest()[pri:1, instance:testcases.testcases@71f2a7d5]" name="loginTest" duration-ms="0" started-at="2019-06-05T07:39:38Z" finished-at="2019-06-05T07:39:38Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- loginTest -->
        <test-method status="PASS" signature="aftermethod()[pri:0, instance:testcases.testcases@71f2a7d5]" name="aftermethod" is-config="true" duration-ms="1" started-at="2019-06-05T07:39:38Z" finished-at="2019-06-05T07:39:38Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- aftermethod -->
        <test-method status="PASS" signature="beforemethod()[pri:0, instance:testcases.testcases@71f2a7d5]" name="beforemethod" is-config="true" duration-ms="1" started-at="2019-06-05T07:39:38Z" finished-at="2019-06-05T07:39:38Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforemethod -->
        <test-method status="PASS" signature="changePassword()[pri:2, instance:testcases.testcases@71f2a7d5]" name="changePassword" duration-ms="0" started-at="2019-06-05T07:39:38Z" depends-on-methods="testcases.testcases.loginTest" finished-at="2019-06-05T07:39:38Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- changePassword -->
        <test-method status="PASS" signature="aftermethod()[pri:0, instance:testcases.testcases@71f2a7d5]" name="aftermethod" is-config="true" duration-ms="1" started-at="2019-06-05T07:39:38Z" finished-at="2019-06-05T07:39:38Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- aftermethod -->
        <test-method status="PASS" signature="beforemethod()[pri:0, instance:testcases.testcases@71f2a7d5]" name="beforemethod" is-config="true" duration-ms="1" started-at="2019-06-05T07:39:38Z" finished-at="2019-06-05T07:39:38Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforemethod -->
        <test-method status="PASS" signature="Logout()[pri:3, instance:testcases.testcases@71f2a7d5]" name="Logout" duration-ms="0" started-at="2019-06-05T07:39:38Z" depends-on-methods="testcases.testcases.loginTest, testcases.testcases.changePassword" finished-at="2019-06-05T07:39:38Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Logout -->
        <test-method status="PASS" signature="aftermethod()[pri:0, instance:testcases.testcases@71f2a7d5]" name="aftermethod" is-config="true" duration-ms="0" started-at="2019-06-05T07:39:38Z" finished-at="2019-06-05T07:39:38Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- aftermethod -->
        <test-method status="PASS" signature="aftertest()[pri:0, instance:testcases.testcases@71f2a7d5]" name="aftertest" is-config="true" duration-ms="0" started-at="2019-06-05T07:39:38Z" finished-at="2019-06-05T07:39:38Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- aftertest -->
        <test-method status="PASS" signature="aftersuite()[pri:0, instance:testcases.testcases@71f2a7d5]" name="aftersuite" is-config="true" duration-ms="0" started-at="2019-06-05T07:39:38Z" finished-at="2019-06-05T07:39:38Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- aftersuite -->
      </class> <!-- testcases.testcases -->
    </test> <!-- Selling Books -->
  </suite> <!-- TestNG Learning -->
</testng-results>
